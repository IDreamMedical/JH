<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:local_def="clr-namespace:UniGuy.Windows.Definitions;assembly=UniGuy.PresentationCore"
    xmlns:local_data="clr-namespace:UniGuy.Windows.Data"  
    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:mc="http://schemas.openxmlformats.org/mark-compatibility/2006"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Color_RD.xaml"/>
        <ResourceDictionary Source="Brush_RD.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.WindowBackgroundBrushKey}" Color="{DynamicResource col_uiFramework_window_fill}" />
    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.WindowForegroundBrushKey}" Color="{DynamicResource col_uiFramework_active}" />


    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.ListRow0BackgroundBrushKey}" Color="{DynamicResource col_uiFramework_window_fill}"/>
    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.ListRow1BackgroundBrushKey}" Color="{DynamicResource col_uiFramework_window_alternate_fill}" />

    <BooleanToVisibilityConverter x:Key="boolToVisibility" />
    <local_data:InverseBoolConverter x:Key="InverseBoolConverter" />

    <Style TargetType="{x:Type ScrollViewer}" x:Key="{x:Static local_def:ResourceDefinitions.ScrollViewerStyleKey}">
        <!-- scroll viewer -->
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">

                    <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" DockPanel.Dock="Top"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </DockPanel>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>


                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.ButtonStyleKey}">
        <!-- button -->
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="MinWidth" Value="22"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <Border Margin="{TemplateBinding Padding}">
                            <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5,0,5,1"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>


                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true" >
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make Button style be used -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ButtonStyleKey}}" />

    <Style TargetType="{x:Type CheckBox}" x:Key="{x:Static local_def:ResourceDefinitions.CheckBoxStyleKey}">
        <!-- checkbox -->
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Grid x:Name="CheckFrame">
                                    <Border x:Name="Effect" Background="{DynamicResource br_btn_capsule_borderInner_hover}" BorderBrush="{DynamicResource br_btn_capsule_borderInner_hover}" BorderThickness="1.5" Effect="{DynamicResource fx_blurEffect_highlight_radio_btn}" CornerRadius="1.5" SnapsToDevicePixels="True" />
                                    <Border x:Name="BorderOuter" Background="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" SnapsToDevicePixels="True" CornerRadius="1.5"/>
                                    <Border x:Name="BorderInner" Margin="1" Background="{DynamicResource br_btn_capsule_borderInner_normal}" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="0.5" SnapsToDevicePixels="True"/>
                                    <Border x:Name="FillInner" Margin="1" Background="{DynamicResource grad_btn_radio_fill_normal}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True"/>
                                </Grid>
                                <Path x:Name="CheckMark" Width="Auto" Height="Auto" Margin="2.375,-1.25,-1.375,2.25" Stroke="{DynamicResource br_uiFramework_foreground_hover}" Fill="{DynamicResource grad_btn_radio_checkMark_fill}" SnapsToDevicePixels="True" StrokeThickness="1" Data="M 12.4227,0.00012207C 12.4867,0.126587 12.5333,0.274536 12.6787,0.321411C 9.49199,3.24792 6.704,6.57336 4.69865,10.6827C 4.04399,11.08 3.47066,11.5573 2.83199,11.9706C 2.09467,10.2198 1.692,8.13196 3.8147e-006,7.33606C 0.500004,6.79871 1.31733,6.05994 1.93067,6.2428C 2.85999,6.51868 3.14,7.9054 3.60399,8.81604C 5.80133,5.5387 8.53734,2.19202 12.4227,0.00012207 Z " Stretch="Fill"/>
                                <Border x:Name="MixedCheckMark" Margin="3" CornerRadius="0.25" BorderBrush="{DynamicResource br_uiFramework_foreground_hover}" Background="{DynamicResource grad_btn_radio_checkMark_fill}" SnapsToDevicePixels="True" BorderThickness="1"  Visibility="Collapsed"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="MixedCheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BorderInner" Property="Background" Value="{DynamicResource br_btn_capsule_borderInner_hover}" />
                            <Setter TargetName="BorderInner" Property="BorderBrush" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter TargetName="FillInner" Property="Background" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="BorderInner" Property="Background" Value="{DynamicResource br_btn_capsule_borderInner_pressed}" />
                            <Setter TargetName="BorderInner" Property="BorderBrush" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter TargetName="FillInner" Property="Background" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make Checkbox style be used -->
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.CheckBoxStyleKey}}" />

    <Style TargetType="{x:Type RadioButton}" x:Key="{x:Static local_def:ResourceDefinitions.RadioButtonStyleKey}">
        <!-- radio button -->
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Grid x:Name="BulletFrame">
                                    <Ellipse x:Name="Effect" Fill="{DynamicResource br_btn_capsule_borderInner_hover}" Stroke="{DynamicResource br_btn_capsule_borderInner_hover}" StrokeThickness="1" Effect="{DynamicResource fx_blurEffect_highlight_radio_btn}" SnapsToDevicePixels="True" />
                                    <Ellipse x:Name="Ellipse_BorderOuter" Stroke="{DynamicResource br_btn_capsule_borderOuter_normal}" StrokeThickness="1.5" SnapsToDevicePixels="True"/>
                                    <Ellipse x:Name="Ellipse_BorderInner" Margin="1" Fill="{DynamicResource grad_btn_radio_fill_normal}" Stroke="{DynamicResource br_btn_capsule_borderInner_normal}" StrokeThickness="1" SnapsToDevicePixels="True"/>
                                </Grid>
                                <Grid x:Name="CheckMark">
                                    <Ellipse x:Name="Bullet" Margin="3"  StrokeThickness="1" Stroke="{DynamicResource br_btn_radio_checkMark_border}" Fill="{DynamicResource grad_btn_radio_checkMark_fill}" SnapsToDevicePixels="True"/>
                                </Grid>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Ellipse_BorderInner" Property="Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}" />
                            <Setter TargetName="Ellipse_BorderInner" Property="Stroke" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter TargetName="Effect" Property="Stroke" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter TargetName="Effect" Property="Fill" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Ellipse_BorderInner" Property="Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}" />
                            <Setter TargetName="Ellipse_BorderInner" Property="Stroke" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter TargetName="Effect" Property="Stroke" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter TargetName="Effect" Property="Fill" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make RadioButton style be used -->
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.RadioButtonStyleKey}}" />


    <Style TargetType="{x:Type ToggleButton}" x:Key="{x:Static local_def:ResourceDefinitions.ToggleButtonStyleKey}">
        <!-- toggle button -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="MinWidth" Value="18"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5,0,5,1"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--ToggleButton.IsChecked trigger must be before IsMouseOver trigger-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="{x:Static local_def:ResourceDefinitions.MiddleCapsuleExpanderToggleButtonStyleKey}">
        <!-- capsule middle button -->
        <Setter Property="MinWidth" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1,1,0,1" CornerRadius="0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{x:Null}" Margin="1,1,0,1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <Path x:Name="Arrow" Stroke="{DynamicResource br_uiFramework_foreground_active}" StrokeThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1  L 4.5,4.5  L 8,1  M 1,6  L 4.5,9.5  L 8,6"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Data" TargetName="Arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5  M 1,9.5  L 4.5,6  L 8,9.5" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="{x:Static local_def:ResourceDefinitions.ExpanderToggleButtonStyleKey}">
        <!-- expander toggle button -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="MinWidth" Value="19"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <Path x:Name="Arrow" Width="9" Stroke="{DynamicResource br_uiFramework_foreground_active}" StrokeThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1  L 4.5,4.5  L 8,1  M 1,6  L 4.5,9.5  L 8,6"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--ToggleButton.IsChecked trigger must be before IsMouseOver trigger-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Data" TargetName="Arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5  M 1,9.5  L 4.5,6  L 8,9.5" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True"/>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ToggleButton style be used -->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ToggleButtonStyleKey}}" />


    <!-- Scrollbar Control resources defined here -->
    <Style x:Key="Scroll_Bar_LineBtn_Up" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Grid MaxWidth="16" MaxHeight="16" Width="16" Height="16" SnapsToDevicePixels="True" HorizontalAlignment="Center">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" Margin="0" SnapsToDevicePixels="True" BorderThickness="0.5" CornerRadius="2" VerticalAlignment="Stretch" Height="Auto" Background="{DynamicResource grad_scrollBar_btn_fill_normal}"/>
                        <Border x:Name="Border_Blur" BorderBrush="{DynamicResource br_scrollBar_btn_border_normal}" Background="{x:Null}" BorderThickness="0.5" CornerRadius="2" VerticalAlignment="Stretch" Height="Auto" Margin="0" SnapsToDevicePixels="True" Visibility="Hidden" Effect="{DynamicResource fx_blurEffect_highlight_scrollBar_btn}"/>
                        <Viewbox x:Name="Container" HorizontalAlignment="Center" VerticalAlignment="Center" Width="8" Height="4" RenderTransformOrigin="0.5,0.5" Opacity="{DynamicResource opac_scrollBar_btn_container_normal}">
                            <Viewbox.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Viewbox.RenderTransform>
                            <Canvas Width="8" Height="4">
                                <Path x:Name="Line_Arrow" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" StrokeThickness="0.5" Margin="0" Data="M44.75,228.75 L66.083333,228.75 55.416668,239.10264 z" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource br_scrollBar_btn_arrow_normal}" VerticalAlignment="Stretch" Height="4" HorizontalAlignment="Stretch" Width="8" Canvas.Top="0" Canvas.Left="0">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="180"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Canvas>
                        </Viewbox>
                        <Border x:Name="Border" BorderBrush="{DynamicResource br_scrollBar_btn_border_normal}" Background="{x:Null}" BorderThickness="0.5" CornerRadius="2" VerticalAlignment="Stretch" Height="Auto" Margin="0" SnapsToDevicePixels="True"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true">
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_scrollBar_btn_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Border_Blur" Value="{DynamicResource br_scrollBar_btn_border_hover}"/>
                            <Setter Property="Effect" TargetName="Border_Blur" Value="{DynamicResource fx_blurEffect_highlight_scrollBar_btn}"/>
                            <Setter Property="Visibility" TargetName="Border_Blur" Value="Visible"/>
                            <Setter Property="Opacity" TargetName="Container" Value="{DynamicResource opac_scrollBar_btn_container_hover}"/>
                            <Setter Property="Fill" TargetName="Line_Arrow" Value="{DynamicResource br_scrollBar_btn_arrow_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource br_scrollBar_btn_border_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_scrollBar_btn_fill_dragging}"/>
                            <Setter Property="BorderBrush" TargetName="Border_Blur" Value="{DynamicResource br_scrollBar_btn_border_dragging}"/>
                            <Setter Property="Effect" TargetName="Border_Blur" Value="{DynamicResource fx_blurEffect_highlight_scrollBar_btn}"/>
                            <Setter Property="Visibility" TargetName="Border_Blur" Value="Visible"/>
                            <Setter Property="Opacity" TargetName="Container" Value="{DynamicResource opac_scrollBar_btn_container_dragging}"/>
                            <Setter Property="Fill" TargetName="Line_Arrow" Value="{DynamicResource br_scrollBar_btn_arrow_dragging}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource br_scrollBar_btn_border_dragging}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type ListBox}" x:Key="{x:Static local_def:ResourceDefinitions.ListBoxStyleKey}">
        <!-- listbox -->
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Background" Value="{DynamicResource br_uiFramework_window_fill}" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>

                        <Border x:Name="BorderOuter" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1" CornerRadius="0"/>
                        <Border x:Name="BorderInner" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" BorderThickness="1" Margin="1" Padding="0" CornerRadius="0">
                            <ScrollViewer x:Name="ScrollViewer" Style="{DynamicResource {x:Static local_def:ResourceDefinitions.ScrollViewerStyleKey}}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Focusable="False" CanContentScroll="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ListBox style be used -->
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxStyleKey}}" />


    <Style TargetType="{x:Type ListBoxItem}" x:Key="{x:Static local_def:ResourceDefinitions.ListBoxItemStyleKey}">
        <!-- listboxitem -->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" SnapsToDevicePixels="True" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="0" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter Margin="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource br_item_fill_hover}"/>
                        </Trigger>


                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource br_item_fill_inFocus}"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource br_item_fill_selectedNotInFocus}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ListBoxItem style be used -->
    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxItemStyleKey}}" />


    <!-- Expander Toggle Button -->
    <Style x:Key="Expander_Toggle_Button" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}" />
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">

                    <Border x:Name="border" SnapsToDevicePixels="True" BorderBrush="{DynamicResource br_item_fill_selectedNotInFocus}" BorderThickness="1" CornerRadius="0">
                        <Grid>
                            <Border x:Name="background" Background="{DynamicResource br_item_fill_selectedNotInFocus}" CornerRadius="0" />
                            <DockPanel LastChildFill="True">
                                <Path x:Name="arrow" DockPanel.Dock="Left" Margin="5" VerticalAlignment="Center"
										Fill="{DynamicResource br_uiFramework_foreground_active}" StrokeThickness="0.5" RenderTransformOrigin="0.5,0.5"
										Stroke="{DynamicResource br_uiFramework_foreground_active}"
										Data="M 0,0 L 3.5,4 L 7,0 Z" SnapsToDevicePixels="True">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="0" />
                                    </Path.RenderTransform>
                                </Path>
                                <ContentPresenter Margin="{TemplateBinding Padding}" TextElement.FontWeight="Bold" />
                            </DockPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush"
									Value="{DynamicResource br_item_fill_hover}" />
                            <Setter TargetName="background" Property="Background"
									Value="{DynamicResource br_item_fill_hover}" />
                            <Setter Property="TextElement.Foreground"
									Value="{DynamicResource br_uiFramework_foreground_active}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderBrush"
									Value="{DynamicResource br_item_fill_hover}" />
                            <Setter TargetName="background" Property="Background"
									Value="{DynamicResource br_item_fill_hover}" />
                            <Setter Property="TextElement.Foreground"
									Value="{DynamicResource br_uiFramework_foreground_active}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="Transparent"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetName="arrow">
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="-180"
												Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetName="arrow">
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="0"
												Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type Expander}" x:Key="{x:Static local_def:ResourceDefinitions.ExpanderStyleKey}">
        <!-- expander -->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="IsExpanded" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">

                    <DockPanel LastChildFill="True">
                        <ToggleButton  x:Name="Header" DockPanel.Dock="Top" Style="{DynamicResource Expander_Toggle_Button}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}"  ToolTip="{TemplateBinding ToolTip}" />

                        <Border x:Name="ExpandSite" DockPanel.Dock="Bottom" Visibility="Collapsed" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" CornerRadius="0" Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="6,8" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="false" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </Border>

                    </DockPanel>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>



                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ComboPhantomToggleButton">
        <Setter Property="Opacity" Value="0" />
    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="ComboToggleButton">

        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,4,4,0" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="0,4,4,0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="0,3,3,0" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,4,4,0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <Border x:Name="arrow_holder" HorizontalAlignment="Right" Margin="0,2,0,3" VerticalAlignment="Stretch" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" BorderThickness="0" Height="{DynamicResource {x:Static SystemParameters.VerticalScrollBarThumbHeightKey}}" >
                            <Path x:Name="path" Data="M0,0L3.5,4 7,0z" Fill="{DynamicResource br_uiFramework_foreground_active}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
            </Trigger>

        </Style.Triggers>


    </Style>



    <!-- if you modify this, please also modify MultiSelectComboBox -->
    <Style TargetType="{x:Type ComboBox}" x:Key="{x:Static local_def:ResourceDefinitions.ComboBoxStyleKey}">
        <!-- combobox -->
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="MaxHeight" Value="22"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">

                    <Border SnapsToDevicePixels="True">
                        <Grid>
                            <Border x:Name="DropdownContainer" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="2" Background="{x:Null}" Margin="0" Padding="1">
                                <Popup x:Name="Popup" Margin="0" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" >
                                    <Grid x:Name="DropDown" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" Margin="0">
                                        <Border x:Name="DropDown_DropShadow_Blur" SnapsToDevicePixels="True" Background="{DynamicResource br_btn_os_blurEffect_fill_normal}" CornerRadius="5" Margin="2,3,2,2" RenderTransformOrigin="0.5,0.5" Effect="{DynamicResource fx_blurEffect_ds_comboBox_dropDown}"/>
                                        <Border x:Name="BorderOuter" Margin="0,2,3,3" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_fill}" />
                                        <Border x:Name="BorderInner" Margin="1,3,4,4" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="3" BorderBrush="{DynamicResource br_contextMenu_borderInner}" >
                                            <ScrollViewer Padding="1" Style="{DynamicResource Scroll_Viewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                                <ItemsPresenter Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Border>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0" BorderBrush="{DynamicResource br_textBox_borderShadow}" BorderThickness="1,1,0,0" CornerRadius="4,0,0,4" Margin="0" Background="{DynamicResource grad_textBox_fill}">
                                    <Border BorderBrush="{DynamicResource br_textBox_borderHighlight}" BorderThickness="0,0,0,1" CornerRadius="0,0,0,4" />
                                </Border>
                                <ToggleButton Grid.Column="1" x:Name="toggleButton" Margin="0" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Height="22" HorizontalAlignment="Left" Style="{StaticResource ComboToggleButton}" />
                                <ToggleButton Grid.Column="0" x:Name="toggleButton_Copy" Margin="0,0,0,-0.001" Width="Auto" MinWidth="0" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Height="22" HorizontalAlignment="Stretch" Style="{StaticResource ComboPhantomToggleButton}" />

                            </Grid>
                            <Border x:Name="SelectedItemBorder" CornerRadius="1" Margin="3,0,20,1">
                                <Grid>
                                    <ContentPresenter HorizontalAlignment="Left" Margin="0,0,2,0" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
                                    <TextBox x:Name="PART_EditableTextBox" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}"  Foreground="{TemplateBinding Foreground}" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="Transparent" Margin="-1,0,0,0" Visibility="Collapsed" IsReadOnly="{TemplateBinding IsReadOnly}" CaretBrush="{DynamicResource br_uiFramework_foreground_active}" >
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" >
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <ScrollViewer x:Name="PART_ContentHost"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionBoxHighlighted" Value="True"/>
                                <Condition Property="IsDropDownOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="SelectedItemBorder" Value="{x:Null}"/>
                        </MultiTrigger>

                        <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                            <Setter Property="Background" TargetName="SelectedItemBorder" Value="{x:Null}"/>
                        </Trigger>

                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDown"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   
    <!-- Single line of code to make ComboBox style be used -->
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ComboBoxStyleKey}}" />


    <Style TargetType="{x:Type ComboBoxItem}" x:Key="{x:Static local_def:ResourceDefinitions.ComboBoxItemStyleKey}">
        <!-- comboboxitem -->
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" SnapsToDevicePixels="True" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter Margin="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource br_item_fill_inFocus}" TargetName="Border"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ComboBoxItem style be used -->
    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ComboBoxItemStyleKey}}" />


    <Style TargetType="{x:Type ProgressBar}" x:Key="{x:Static local_def:ResourceDefinitions.ProgressBarStyleKey}">
        <!-- progressbar -->
        <Setter Property="Height" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">

                    <Grid SnapsToDevicePixels="True" ClipToBounds="True">
                        <!-- This Border is the track. It must be named PART_Track -->
                        <Border x:Name="PART_Track" Background="{DynamicResource br_progressBar_fill}" CornerRadius="2"/>
                        <!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
                        <Border HorizontalAlignment="Left" Margin="1" Width="Auto" x:Name="PART_Indicator" CornerRadius="1,0,0,1" Background="{DynamicResource grad_progressBar_indicator_fill}"/>
                        <Border x:Name="Glass_Effect" Margin="1" CornerRadius="1" Width="Auto" Background="{DynamicResource grad_progressBar_glassEffect}"/>
                        <Border x:Name="Border" BorderBrush="{DynamicResource br_progressBar_border}" BorderThickness="1" CornerRadius="2"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <local_data:MultiToRectConverter x:Key="multiToRectConverter" />
    <local_data:WidthsToVisibilityConverter x:Key="widthsToVisibilityConverter" />
    <local_data:OffsetConverter x:Key="offsetConverter" />
    <local_data:ValueToBackgroundConverter x:Key="valueBackgroundConverter"
                                          NormalBrush="{StaticResource grad_progressBar_indicator_fill}"
                                          WarningBrush="{StaticResource grad_progressBar_indicator_fill_warning}"
                                          ErrorBrush="{StaticResource grad_progressBar_indicator_fill_error}" />
    
    <Style TargetType="{x:Type TextBox}" x:Key="{x:Static local_def:ResourceDefinitions.TextBoxStyleKey}">
        <!-- textbox -->
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="CaretBrush" Value="{DynamicResource br_uiFramework_foreground_active}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <Border x:Name="ShadowBorder" SnapsToDevicePixels="true" Margin="0,0,0,1" BorderBrush="{DynamicResource br_textBox_borderShadow}" Background="{DynamicResource grad_textBox_fill}" BorderThickness="1,1,0,0" CornerRadius="4">
                        <Border x:Name="HighlightBorder" BorderBrush="{DynamicResource br_textBox_borderHighlight}" BorderThickness="0,0,1,1" CornerRadius="4">
                            <ScrollViewer x:Name="PART_ContentHost" Style="{DynamicResource {x:Static local_def:ResourceDefinitions.ScrollViewerStyleKey}}"/>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="{x:Static local_def:ResourceDefinitions.DarkerTextBoxStyleKey}"  BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TextBoxStyleKey}}">

    </Style>
    
    
    <!-- Single line of code to make TextBox style be used -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TextBoxStyleKey}}" />


    <Style TargetType="{x:Type PasswordBox}" x:Key="{x:Static local_def:ResourceDefinitions.PasswordBoxStyleKey}">
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource br_uiFramework_foreground_active}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">

                    <Border x:Name="ShadowBorder" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_textBox_borderShadow}" Background="{DynamicResource grad_textBox_fill}" BorderThickness="1,1,0,0" CornerRadius="2">
                        <Border x:Name="HighlightBorder" BorderBrush="{DynamicResource br_textBox_borderHighlight}" BorderThickness="0,0,1,1" CornerRadius="4">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- passwordbox -->
    </Style>


    <Style TargetType="{x:Type RichTextBox}" x:Key="{x:Static local_def:ResourceDefinitions.RichTextBoxStyleKey}">
        <Setter Property="Background" Value="Red"/>
        <!-- richtextbox -->
    </Style>


    <Style TargetType="{x:Type Label}" x:Key="{x:Static local_def:ResourceDefinitions.LabelStyleKey}">
        <!-- label -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">

                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make Label style be used -->
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.LabelStyleKey}}" />


    <Style TargetType="{x:Type Menu}" x:Key="{x:Static local_def:ResourceDefinitions.MenuStyleKey}">
        <!-- menu -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">

                    <Grid Height="Auto" VerticalAlignment="Stretch">
                        <StackPanel Margin="3,0,3,0" Background="Transparent" IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ContextMenu}" x:Key="{x:Static local_def:ResourceDefinitions.ContextMenuStyleKey}">
        <!-- menu -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">

                    <Grid>
                        <Border x:Name="DropDown_DropShadow_Blur" SnapsToDevicePixels="True" Background="{DynamicResource br_btn_os_blurEffect_fill_normal}" CornerRadius="5" Margin="2,3,2,2" RenderTransformOrigin="0.5,0.5" Effect="{DynamicResource fx_blurEffect_ds_comboBox_dropDown}"/>
                        <Border x:Name="BorderOuter" Margin="0,2,3,3" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_fill}" />
                        <Border x:Name="DividerDark" Margin="4,6,0,7" Width="26" BorderThickness="0,0,1,0" CornerRadius="1,0,0,1" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_column0_fill}" HorizontalAlignment="Left"/>
                        <Border x:Name="DividerLight" Margin="30,6,4,7" Width="1" BorderThickness="1,0,0,0" CornerRadius="0" BorderBrush="{DynamicResource br_contextMenu_borderInner}"  HorizontalAlignment="Left"/>
                        <Border x:Name="BorderInner" Margin="1,3,4,4" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="3" BorderBrush="{DynamicResource br_contextMenu_borderInner}" />
                        <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto" Margin="4,5,7,6" >
                            <StackPanel Background="Transparent" IsItemsHost="True" ClipToBounds="True" Orientation="Vertical"/>
                        </ScrollViewer>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ContextMenu style be used -->
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ContextMenuStyleKey}}" />


    <Style TargetType="{x:Type MenuItem}" x:Key="{x:Static local_def:ResourceDefinitions.MenuItemStyleKey}">
        <!-- menuitem -->
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_menu_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_menu_fontSize}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid>
                        <Border x:Name="Border" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>

                                <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							     Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="0" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition MinWidth="0" Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <!-- The IconColumn contains the check and icons within a bordered box -->
                                <Grid x:Name="IconColumn" Grid.Column="0" Width="18" Margin="3,0,3,0"  HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Path x:Name="Check" Visibility="Hidden" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                    <ContentPresenter x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Icon" Margin="1"/>
                                </Grid>

                                <!-- Content for the menu text etc -->
                                <ContentPresenter x:Name="HeaderHost" Margin="6,3,6,3" Grid.Column="1" RecognizesAccessKey="True" ContentSource="Header" MaxWidth="400">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,3,5,3" DockPanel.Dock="Right" />

                                <!-- Arrow drawn path which points to the next level of the menu -->
                                <Grid Grid.Column="3" Margin="3,0,3,0" x:Name="ArrowPanel" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                </Grid>

                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                       Placement="Right" x:Name="SubMenuPopup" Focusable="false" 
                                       AllowsTransparency="true"
                                       TextOptions.TextRenderingMode="ClearType"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                                       VerticalOffset="-3" HorizontalOffset="1" Grid.IsSharedSizeScope="True">
                                    <Grid x:Name="SubMenu">
                                        <Border x:Name="DropDown_DropShadow_Blur" SnapsToDevicePixels="True" Background="{DynamicResource br_btn_os_blurEffect_fill_normal}" CornerRadius="5" Margin="2,3,2,2" RenderTransformOrigin="0.5,0.5" Effect="{DynamicResource fx_blurEffect_ds_comboBox_dropDown}"/>
                                        <Border x:Name="BorderOuter" Margin="0,2,3,3" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_fill}" />
                                        <Border x:Name="DividerDark" Margin="4,6,0,7" Width="26" BorderThickness="0,0,1,0" CornerRadius="1,0,0,1" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_column0_fill}" HorizontalAlignment="Left"/>
                                        <Border x:Name="DividerLight" Margin="30,6,4,7" Width="1" BorderThickness="1,0,0,0" CornerRadius="0" BorderBrush="{DynamicResource br_contextMenu_borderInner}"  HorizontalAlignment="Left"/>
                                        <Border x:Name="BorderInner" Margin="1,3,4,4" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="3" BorderBrush="{DynamicResource br_contextMenu_borderInner}" />
                                        <ScrollViewer  Margin="4,5,7,6" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto"  >
                                            <StackPanel Background="Transparent" IsItemsHost="True" Orientation="Vertical" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="HorizontalOffset" Value="0" TargetName="SubMenuPopup"/>
                            <Setter Property="VerticalOffset" Value="-1" TargetName="SubMenuPopup"/>
                            <Setter Property="Margin" TargetName="HeaderHost" Value="10,3,10,4"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IconColumn"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="InputGestureText"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" TargetName="HeaderHost" Value="10,3,10,4"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IconColumn"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="InputGestureText"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which has children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which does not have children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The Check contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="Check"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource br_item_fill_inFocus}" TargetName="Border"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu Item Separator -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="3"/>
        <Setter Property="Margin" Value="29,3,0,0" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">

                    <Border BorderBrush="{DynamicResource br_contextMenu_separator_border}" BorderThickness="0,1,0,0" />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make Separator style be used -->
    <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />


    <Style TargetType="{x:Type Separator}" x:Key="{x:Static local_def:ResourceDefinitions.SeparatorStyleKey}">
        <!-- separator -->
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">

                    <Border BorderBrush="{DynamicResource br_separator_border}" BorderThickness="0,1,0,0" />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style TargetType="{x:Type TabControl}" x:Key="{x:Static local_def:ResourceDefinitions.TabControlStyleKey}">
        <!-- tab control -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">

                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="moduleDivider" Height="2"/>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Grid.Column="0" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="0,1,0,0" VerticalAlignment="Top"/>
                        <Border Grid.Row="0" Grid.Column="0" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" BorderThickness="0,0,0,1" VerticalAlignment="Bottom"/>
                        <Border x:Name="ContentPanel" BorderBrush="{DynamicResource br_tabControl_borderShadow}" CornerRadius="0,2,2,2" BorderThickness="1" Grid.Column="0" Grid.Row="2" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <Border Background="{DynamicResource br_tabControl_fill}" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" CornerRadius="0,2,2,2" BorderThickness="0,1,0,0" >
                                <ContentPresenter x:Name="PART_SelectedContentHost" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="SelectedContent"/>
                            </Border>
                        </Border>
                        <TabPanel x:Name="HeaderPanel" Margin="0" IsItemsHost="true" Panel.ZIndex="1" Grid.Column="0" Grid.Row="1" KeyboardNavigation.TabIndex="1" Background="{DynamicResource grad_tabControl_headerPanel_fill}"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type TabItem}" x:Key="{x:Static local_def:ResourceDefinitions.TabItemStyleKey}">
        <!-- tab item -->
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">

                    <Grid>
                        <Border x:Name="TabItemBG" Margin="0,0,3,1" Background="{DynamicResource br_tabControl_item_fill_selected}" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="Content" Margin="3,1,3,2" Panel.ZIndex="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentSource="Header" RecognizesAccessKey="True"  HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        </Border>
                        <Border x:Name="HighlightBorder" BorderThickness="0,0,3,1" Margin="0" BorderBrush="{DynamicResource br_tabControl_item_fill_selected}" Visibility="Hidden"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Margin" Value="0,2,0,-2"/>
                            <Setter Property="Margin" TargetName="HighlightBorder" Value="1,2,4,0"/>
                            <Setter TargetName="HighlightBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="false">
                            <Setter Property="Margin" Value="0,3,0,0"/>
                            <Setter Property="Panel.ZIndex" Value="0"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter TargetName="TabItemBG" Property="Background" Value="{DynamicResource br_tabControl_item_fill_notSelected}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="Margin" Value="0,2,0,-2"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make Tabitem style be used -->
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TabItemStyleKey}}" />



    <Style TargetType="{x:Type TabItem}" x:Key="{x:Static local_def:ResourceDefinitions.OverflowTabItemStyleKey}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TabItemStyleKey}}" >
        <!-- tab item -->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">

                    <Grid>
                        <Border x:Name="TabItemBG" Margin="0,0,3,1" Background="{DynamicResource br_tabControl_item_fill_selected}" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="Content" Margin="3,1,3,1" Panel.ZIndex="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentSource="Header" RecognizesAccessKey="True"  HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        </Border>
                        <Border x:Name="HighlightBorder" BorderThickness="0,0,3,1" Margin="0" BorderBrush="{DynamicResource br_tabControl_item_fill_selected}" Visibility="Hidden"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Margin" Value="0,2,0,-2"/>
                            <Setter Property="Margin" Value="3,1,3,2" TargetName="Content"/>
                            <Setter Property="Margin" TargetName="HighlightBorder" Value="1,2,4,0"/>
                            <Setter TargetName="HighlightBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="false">
                            <Setter Property="Margin" Value="0,3,0,0"/>
                            <Setter Property="Panel.ZIndex" Value="0"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter TargetName="TabItemBG" Property="Background" Value="{DynamicResource br_tabControl_item_fill_notSelected}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="Margin" Value="3,1,3,2" TargetName="Content"/>
                            <Setter Property="Margin" Value="0,2,0,-2"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <local_data:ScrollbarOnFarRightConverter x:Key="scrollbarOnFarRightConverter"/>
    <local_data:ScrollbarOnFarLeftConverter x:Key="scrollbarOnFarLeftConverter"/>
    <local_data:AnyBoolToVisibility x:Key="anyBoolToVisibility"/>
    <local_data:BoolHiddenConverter x:Key="boolToHiddenConverter" />
    
    
    <Style x:Key="RepeatButtonScrollLeft" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="Effect" Background="{DynamicResource br_item_tile_blurEffect_fill_normal}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3"/>
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3" Background="{DynamicResource grad_btn_capsule_fill_normal}" SnapsToDevicePixels="True"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="2" Background="{x:Null}" Margin="1" SnapsToDevicePixels="True"/>
                        <Path Margin="0,1,0,0" Width="4" Height="7" Fill="{TemplateBinding Foreground}"
									Data="M 0,3.5 L 4,0 L 4,7 Z" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="2" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}" SnapsToDevicePixels="True"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" SnapsToDevicePixels="True"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Capsule Button Middle (Scroll Right) -->
    <Style x:Key="RepeatButtonScrollRight" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="Effect" Background="{DynamicResource br_item_tile_blurEffect_fill_normal}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3"/>
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3" Background="{DynamicResource grad_btn_capsule_fill_normal}" SnapsToDevicePixels="True"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="2" Background="{x:Null}" Margin="1" SnapsToDevicePixels="True"/>
                        <Path Margin="0,1,0,0" Width="4" Height="7" Fill="{TemplateBinding Foreground}"
									Data="M 0,0 L 4,3.5 L 0,7 Z" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="2" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}" SnapsToDevicePixels="True"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" SnapsToDevicePixels="True"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Slider}" x:Key="{x:Static local_def:ResourceDefinitions.SliderStyleKey}">
        <!-- slider -->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <!--<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}"/>-->

                        <!-- Slider Track is the rail that the thumb button slides on -->
                        <Grid Grid.Row="1" VerticalAlignment="Center" Margin="0,7,0,5" >
                            <Grid x:Name="SliderTrack" Margin="0,0,0,3" VerticalAlignment="Bottom" Height="4" SnapsToDevicePixels="True">
                                <Border Grid.Row="0" Margin="0" x:Name="BorderFill" Height="4" Background="{DynamicResource br_slider_tickBar_fill}" CornerRadius="0" SnapsToDevicePixels="True"/>
                                <Border Grid.Row="0" Margin="0" x:Name="BorderShadow" Height="4"  BorderBrush="{DynamicResource br_slider_btn_borderOuter_normal}" BorderThickness="1,1,0,0" CornerRadius="0" SnapsToDevicePixels="True"/>
                                <Border Grid.Row="0" Margin="0" x:Name="BorderHighlight" Height="4" BorderBrush="{DynamicResource br_slider_btn_borderInner_normal}" BorderThickness="0,0,1,1" CornerRadius="0" SnapsToDevicePixels="True"/>
                            </Grid>
                            <!-- The Track lays out the repeat buttons and thumb -->
                            <Track Grid.Row="1" x:Name="PART_Track">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource Slider_Thumb_Button}" Width="Auto" Height="Auto" Margin="-5,0"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{DynamicResource Slider_Repeat_Button}" Command="Slider.IncreaseLarge"/>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{DynamicResource Slider_Repeat_Button}" Command="Slider.DecreaseLarge"/>
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>
                        <!--<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}"/>-->
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--<Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>

                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>

                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>-->

                        <Trigger Property="IsEnabled" Value="false">
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                            <!-- Additional commands to create horizontal scroll bar with highlight on top (Only for use when Angel is 90; Not needed if Angle is -90)-->
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="False"/>
                            <!-- invert the border colors so that they imply a groove -->
                            <Setter TargetName="BorderShadow" Property="BorderThickness" Value="1,0,0,1" />
                            <Setter TargetName="BorderHighlight" Property="BorderThickness" Value="0,1,1,0"  />


                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make Slider style be used -->
    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.SliderStyleKey}}" />


    <!-- Slider Repeat Button -->
    <Style x:Key="Slider_Repeat_Button" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Grid>
                        <Rectangle Fill="{DynamicResource br_slider_page_btn}"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Slider Thumb Button -->
    <Style x:Key="Slider_Thumb_Button" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">

                    <Grid Height="Auto" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" Width="Auto" SnapsToDevicePixels="True" VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="-90"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="BorderBlur" SnapsToDevicePixels="True" Stretch="Fill" Data="M527.49982,23.499978 C527.49982,23.499978 527.49933,15.499814 535.49934,15.499814 543.49934,15.499814 560.24908,15.50014 560.2494,15.50014 568.24939,15.499814 587.24924,27.875319 587.24954,27.875469 591.88441,30.500608 591.87049,33.125746 587.24985,35.750885 587.24884,35.751389 568.24939,47.501507 560.24992,47.501507 560.2494,47.501508 543.4997,47.501508 535.49951,47.501508 527.49933,47.501508 527.49933,39.501085 527.49934,39.500683 527.49934,39.500683 527.49982,23.499978&#xa;527.49982,23.499978 z" RenderTransformOrigin="0.5,0.5" Stroke="{DynamicResource br_slider_btn_borderOuter_normal}" Width="22.457" Height="11.5" Margin="0" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource br_slider_btn_borderInner_normal}" Effect="{DynamicResource fx_blurEffect_ds_slider_btn}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="BorderOuter" SnapsToDevicePixels="True" Stretch="Fill" Data="M527.49982,23.499978 C527.49982,23.499978 527.49933,15.499814 535.49934,15.499814 543.49934,15.499814 560.24908,15.50014 560.2494,15.50014 568.24939,15.499814 587.24924,27.875319 587.24954,27.875469 591.88441,30.500608 591.87049,33.125746 587.24985,35.750885 587.24884,35.751389 568.24939,47.501507 560.24992,47.501507 560.2494,47.501508 543.4997,47.501508 535.49951,47.501508 527.49933,47.501508 527.49933,39.501085 527.49934,39.500683 527.49934,39.500683 527.49982,23.499978&#xa;527.49982,23.499978 z" RenderTransformOrigin="0.5,0.5" Stroke="{DynamicResource br_slider_btn_borderOuter_normal}" Width="22.457" Height="11.5" Margin="0" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource br_slider_btn_borderInner_normal}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="BorderInner" SnapsToDevicePixels="True" Stretch="Fill" Data="M527.49982,23.499978 C527.49982,23.499978 527.49933,15.499814 535.49934,15.499814 543.49934,15.499814 560.24908,15.50014 560.2494,15.50014 568.24939,15.499814 587.24924,27.875319 587.24954,27.875469 591.88441,30.500608 591.87049,33.125746 587.24985,35.750885 587.24884,35.751389 568.24939,47.501507 560.24992,47.501507 560.2494,47.501508 543.4997,47.501508 535.49951,47.501508 527.49933,47.501508 527.49933,39.501085 527.49934,39.500683 527.49934,39.500683 527.49982,23.499978&#xa;527.49982,23.499978 z" RenderTransformOrigin="0.5,0.5" Stroke="{DynamicResource br_slider_btn_borderInner_normal}" StrokeThickness="0.75" Width="20.5" Height="10" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Grid.ColumnSpan="1" Fill="{DynamicResource grad_slider_btn_fill_normal}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="GlassEffect" Stretch="Fill" Data="M527.49982,23.499978 C527.49982,23.499978 527.49933,15.499814 535.49934,15.499814 543.49934,15.499814 560.24908,15.50014 560.2494,15.50014 568.24939,15.499814 587.24924,27.875319 587.24954,27.875469 591.88441,30.500608 591.87049,33.125746 587.24985,35.750885 587.24884,35.751389 568.24939,47.501507 560.24992,47.501507 560.2494,47.501508 543.4997,47.501508 535.49951,47.501508 527.49933,47.501508 527.49933,39.501085 527.49934,39.500683 527.49934,39.500683 527.49982,23.499978&#xa;527.49982,23.499978 z" RenderTransformOrigin="0.5,0.5" Stroke="{DynamicResource br_slider_btn_borderInner_normal}" StrokeThickness="0.75" Width="20.5" Height="10" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Grid.ColumnSpan="1" Fill="{DynamicResource grad_slider_btn_glassEffect_normal}" SnapsToDevicePixels="True">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="Spotlight" Stretch="Fill" Data="M527.49982,23.499978 C527.49982,23.499978 527.49933,15.499814 535.49934,15.499814 543.49934,15.499814 560.24908,15.50014 560.2494,15.50014 568.24939,15.499814 587.24924,27.875319 587.24954,27.875469 591.88441,30.500608 591.87049,33.125746 587.24985,35.750885 587.24884,35.751389 568.24939,47.501507 560.24992,47.501507 560.2494,47.501508 543.4997,47.501508 535.49951,47.501508 527.49933,47.501508 527.49933,39.501085 527.49934,39.500683 527.49934,39.500683 527.49982,23.499978&#xa;527.49982,23.499978 z" RenderTransformOrigin="0.5,0.5" Stroke="{DynamicResource br_slider_btn_borderInner_normal}" StrokeThickness="0.5" Width="20.5" Height="10" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Grid.ColumnSpan="1" Visibility="Hidden" SnapsToDevicePixels="True" Fill="{DynamicResource grad_slider_btn_spotlight}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="Spotlight" Value="{DynamicResource br_slider_btn_borderInner_hover}"/>
                            <Setter Property="Stroke" TargetName="GlassEffect" Value="{DynamicResource br_slider_btn_borderInner_hover}"/>
                            <Setter Property="Stroke" TargetName="BorderInner" Value="{DynamicResource br_slider_btn_borderInner_hover}"/>
                            <Setter Property="Fill" TargetName="BorderOuter" Value="{DynamicResource br_slider_btn_borderInner_hover}"/>
                            <Setter Property="Stroke" TargetName="BorderOuter" Value="{DynamicResource br_slider_btn_borderOuter_hover}"/>
                            <Setter Property="Fill" TargetName="BorderInner" Value="{DynamicResource grad_slider_btn_fill_hover}"/>
                            <Setter Property="Visibility" TargetName="Spotlight" Value="Visible"/>
                            <Setter Property="Fill" TargetName="GlassEffect" Value="{DynamicResource grad_slider_btn_glassEffect_hover}"/>
                            <Setter Property="Fill" TargetName="Spotlight" Value="{DynamicResource grad_slider_btn_spotlight}"/>
                        </Trigger>

                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Stroke" TargetName="BorderOuter" Value="{DynamicResource br_slider_btn_borderOuter_dragging}"/>
                            <Setter Property="Fill" TargetName="BorderOuter" Value="{DynamicResource br_slider_btn_borderInner_dragging}"/>
                            <Setter Property="Stroke" TargetName="BorderInner" Value="{DynamicResource br_slider_btn_borderInner_dragging}"/>
                            <Setter Property="Stroke" TargetName="GlassEffect" Value="{DynamicResource br_slider_btn_borderInner_dragging}"/>
                            <Setter Property="Stroke" TargetName="Spotlight" Value="{DynamicResource br_slider_btn_borderInner_dragging}"/>
                            <Setter Property="Fill" TargetName="BorderInner" Value="{DynamicResource grad_slider_btn_fill_dragging}"/>
                            <Setter Property="Fill" TargetName="GlassEffect" Value="{DynamicResource grad_slider_btn_glassEffect_dragging}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="Tree_View_Item_ToggleBtn" TargetType="{x:Type ToggleButton}">
        <!-- tree view item toggle button -->
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border Width="19" Height="13" Background="Transparent" Margin="0,1,0,0">
                            <Path x:Name="Arrow" Fill="{DynamicResource br_uiFramework_foreground_active}" Stretch="Fill" Margin="0" Data="M2.375,6.75 L6,3.125 6,6.7499937 z" RenderTransformOrigin="0.5,0.5"  Width="7" Height="7">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="-45"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="{x:Null}"/>
                            <Setter Property="Margin" TargetName="Arrow" Value="-0.125,0,0.125,0"/>
                            <Setter Property="StrokeThickness" TargetName="Arrow" Value="1"/>
                            <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="RenderTransform" TargetName="Arrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource br_item_fill_inFocus}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource br_item_fill_inFocus}" />
                        </MultiTrigger>                        
                        

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type TreeView}" x:Key="{x:Static local_def:ResourceDefinitions.TreeViewStyleKey}">
        <!-- treeview -->
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">

                    <Grid>
                        <Border x:Name="BorderOuter" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1" CornerRadius="0"/>
                        <Border x:Name="BorderInner" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" BorderThickness="1" Margin="1" Padding="0" CornerRadius="0">
                            <ScrollViewer x:Name="ScrollViewer" Style="{DynamicResource {x:Static local_def:ResourceDefinitions.ScrollViewerStyleKey}}" Background="{DynamicResource br_uiFramework_window_fill}" Padding="{TemplateBinding Padding}" Focusable="False" CanContentScroll="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                            <Setter Property="CanContentScroll" TargetName="ScrollViewer" Value="True"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type TreeViewItem}" x:Key="{x:Static local_def:ResourceDefinitions.TreeViewItemStyleKey}">
        <!-- treeview item -->
        <Setter Property="Background" Value="{DynamicResource br_treeView_fill}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource Tree_View_Item_ToggleBtn}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>

                        <!--<Border Grid.Column="1" SnapsToDevicePixels="True" x:Name="Selection_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2">
                            <ContentPresenter x:Name="PART_Header" Margin="2,2,3,2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}"/>
                        </Border>-->

                        <Border Grid.Column="1" SnapsToDevicePixels="True" x:Name="Selection_Border" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="1" Padding="{TemplateBinding Padding}" CornerRadius="2">
                            <ContentPresenter x:Name="PART_Header" Margin="2,2,3,2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}"/>
                        </Border>

                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" />
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_Header" Property="IsMouseOver" Value="True">
                            <!--<Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource br_item_fill_hover}"/>-->
                            <Setter TargetName="Selection_Border" Property="BorderBrush" Value="{DynamicResource br_item_fill_inFocus}" />
                        </Trigger>

                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource br_item_fill_inFocus}" />
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource br_item_fill_selectedNotInFocus}" />
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

        </Style.Triggers>
    </Style>


    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="{x:Type GroupBox}" x:Key="{x:Static local_def:ResourceDefinitions.GroupBoxStyleKey}">
        <!-- groupbox -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">

                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>

                        <!-- Title -->
                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="5,0,5,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True"/>
                        </Border>
                        <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2"/>

                        <!-- Borders -->
                        <Border x:Name="borderOuter" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1" CornerRadius="4">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <Border x:Name="borderInner" Grid.ColumnSpan="4" Margin="1" Grid.Row="1" Grid.RowSpan="3" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" BorderThickness="1" CornerRadius="4">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make GroupBox style be used -->
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.GroupBoxStyleKey}}"/>


    <Style TargetType="{x:Type ListView}" x:Key="{x:Static local_def:ResourceDefinitions.ListViewStyleKey}">
        <!-- listview -->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">

                    <Grid Background="{TemplateBinding Background}">
                        <Border x:Name="BorderOuter" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderShadow}" BorderThickness="1" CornerRadius="0"/>
                        <Border x:Name="BorderInner" SnapsToDevicePixels="true" BorderBrush="{DynamicResource br_tabControl_borderHighlight}" BorderThickness="1" Margin="1" Padding="0" CornerRadius="0">
                            <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false"/>

                        <!--<Trigger Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="Border" Property="CornerRadius" Value="2"/>
                        </Trigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ListView style be used -->
    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxStyleKey}}"/>


    <Style TargetType="{x:Type ListViewItem}" x:Key="{x:Static local_def:ResourceDefinitions.ListViewItemStyleKey}">
        <!-- listviewitem -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <!--<Border x:Name="Bd" SnapsToDevicePixels="True" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <GridViewRowPresenter Margin="0,3,0,3" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>-->

                    <Border x:Name="Bd" SnapsToDevicePixels="True" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Background}" BorderThickness="1" Padding="{TemplateBinding Padding}">
                        <GridViewRowPresenter Margin="0,3,0,3" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource br_item_fill_hover}"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </Trigger>

                        <MultiTrigger>

                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource br_item_fill_selectedNotInFocus}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Single line of code to make ListViewItem style be used -->
    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxItemStyleKey}}"/>


    <!-- Grid View Header -->
    <!-- The following GridViewColumnHeader defines the style of the GridView titles -->
    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}" />
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">

                    <Grid SnapsToDevicePixels="True" MinHeight="20">
                        <Border x:Name="ContentContainer" Background="{DynamicResource grad_gridView_columnHeader_fill_normal}" Margin="0">
                            <ContentPresenter x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
                        </Border>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Background="Transparent">
                                <Thumb.Style>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="Canvas.Right" Value="-9"/>
                                        <Setter Property="Width" Value="18"/>
                                        <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        <Setter Property="Background" Value="Black"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                        <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Canvas>
                        <Border x:Name="HeaderShadow" BorderBrush="{DynamicResource br_gridView_columnHeader_borderShadow_normal}" BorderThickness="0,0,1,1" IsHitTestVisible="False"/>
                        <Border x:Name="HeaderHighlight" BorderBrush="{DynamicResource br_gridView_columnHeader_borderHighlight_normal}" BorderThickness="1,1,0,0" />
                        <Border x:Name="Highlight" BorderBrush="{DynamicResource br_gridView_columnHeader_highlight_normal}" Margin="1" Visibility="Hidden" BorderThickness="0,0,0,2"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ContentContainer" Property="Background" Value="Pink"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ContentContainer" Value="{DynamicResource grad_gridView_columnHeader_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderShadow" Value="{DynamicResource br_gridView_columnHeader_borderShadow_hover}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderHighlight" Value="{DynamicResource br_gridView_columnHeader_borderHighlight_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Highlight" Value="{DynamicResource br_gridView_columnHeader_highlight_hover}"/>
                            <Setter Property="Visibility" TargetName="Highlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter Property="Background" TargetName="ContentContainer" Value="{DynamicResource grad_gridView_columnHeader_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderShadow" Value="{DynamicResource br_gridView_columnHeader_borderShadow_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderHighlight" Value="{DynamicResource br_gridView_columnHeader_borderHighlight_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Highlight" Value="{DynamicResource br_gridView_columnHeader_highlight_pressed}"/>
                        </Trigger>

                        <Trigger Property="Height" Value="NaN">
                            <Setter Property="MinHeight" Value="20"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Grid View Scroll Viewer (For List View)-->
    <!-- The following GridViewColumnHeader defines the style of the GridView ScrollViewer (It references the header) -->
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
        <Setter Property="Focusable" Value="false"/>
        <!--<Setter Property="Background" Value="#FF474747"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">

                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" DockPanel.Dock="Top">
                                <GridViewHeaderRowPresenter Margin="0,0,1,0"

                Columns="{Binding Path=TemplatedParent.View.Columns,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContainerStyle="{Binding
                Path=TemplatedParent.View.ColumnHeaderContainerStyle,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplate="{Binding
                Path=TemplatedParent.View.ColumnHeaderTemplate,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplateSelector="{Binding 
                Path=TemplatedParent.View.ColumnHeaderTemplateSelector,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          AllowsColumnReorder="{Binding
                Path=TemplatedParent.View.AllowsColumnReorder,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContextMenu="{Binding
                Path=TemplatedParent.View.ColumnHeaderContextMenu,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderToolTip="{Binding
                Path=TemplatedParent.View.ColumnHeaderToolTip,
                RelativeSource={RelativeSource TemplatedParent}}"
                                          SnapsToDevicePixels="{TemplateBinding
                SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="True"/>
                        </DockPanel>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Cursor="Arrow" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ToolBar}" x:Key="{x:Static local_def:ResourceDefinitions.ToolBarStyleKey}">
        <!-- toolbar -->
    </Style>


    <Style TargetType="{x:Type GridSplitter}" x:Key="{x:Static local_def:ResourceDefinitions.GridSplitterStyleKey}">
        <!-- grid splitter -->
        <Setter Property="Background" Value="{DynamicResource br_uiFramework_window_fill}" />
    </Style>



    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.CapsuleButtonLeftStyleKey}">
        <!-- capsule left button -->
        <Setter Property="MinWidth" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="4,0,0,4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1,1,0,1" CornerRadius="4,0,0,4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1,1,0,1" CornerRadius="3,0,0,3" Background="{x:Null}" Margin="1,1,0,1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="3,0,0,3" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="4,0,0,4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.CapsuleButtonRightStyleKey}">
        <!-- capsule right button -->
        <Setter Property="MinWidth" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,4,4,0" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="0,4,4,0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="0,3,3,0" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="3,0,0,3" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,4,4,0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.CapsuleButtonMiddleStyleKey}">
        <!-- capsule middle button -->
        <Setter Property="MinWidth" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1,1,0,1" CornerRadius="0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{x:Null}" Margin="1,1,0,1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="CapsuleToggleButtonMiddleStyleKey">
        <!-- capsule middle button -->
        <Setter Property="MinWidth" Value="14"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1,1,0,1" CornerRadius="0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1,1,0,1" CornerRadius="0" Background="{x:Null}" Margin="1,1,0,1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1,1,0,1" CornerRadius="0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Minimize button icon-->
    <!--<Border x:Key="{x:Static local_def:ResourceDefinitions.MinimizeIconBorderKey}"
            Width="12"
            Height="5"
            Margin="0,5,0,0"
            BorderBrush="#535666"
            BorderThickness="1"
            Background="#FFFFFF"
            />-->

    <!--Minimize button icon (disabled)-->
    <!--<Border x:Key="{x:Static local_def:ResourceDefinitions.MinimizeDisabledIconBorderKey}" 
            Width="12" 
            Height="5" 
            Margin="0,5,0,0" 
            BorderBrush="#9FA5B2" BorderThickness="1" Background="#FFFFFF" 
            />-->

    <!--Restore button icon-->
    <!--<Canvas x:Key="{x:Static local_def:ResourceDefinitions.RestoreIconCanvasKey}">
        <Rectangle Stroke="#535666" Fill="White" Width="10" Height="10" Canvas.Top="-6" Canvas.Left="-4" />
        <Rectangle Stroke="#535666" Fill="White" Width="4" Height="4" Canvas.Top="-3" Canvas.Left="-1" />
        <Rectangle Stroke="#535666" Fill="White" Width="10" Height="10" Canvas.Top="-4" Canvas.Left="-6" />
        <Rectangle Stroke="#535666" Fill="White" Width="4" Height="4" Canvas.Top="-1" Canvas.Left="-3" />
    </Canvas>-->

    <!--Restore button icon (disabled)-->
    <!--<Canvas x:Key="{x:Static local_def:ResourceDefinitions.RestoreDisabledIconCanvasKey}">
        <Rectangle Stroke="#9FA5B2" Fill="White" Width="10" Height="10" Canvas.Top="1" Canvas.Left="7" />
        <Rectangle Stroke="#9FA5B2" Fill="White" Width="4" Height="4" Canvas.Top="4" Canvas.Left="10" />
        <Rectangle Stroke="#9FA5B2" Fill="White" Width="10" Height="10" Canvas.Top="3" Canvas.Left="5" />
        <Rectangle Stroke="#9FA5B2" Fill="White" Width="4" Height="4" Canvas.Top="6" Canvas.Left="8" />
    </Canvas>-->

    <!--Maximize button icon-->
    <!--<Border x:Key="{x:Static local_def:ResourceDefinitions.MaximizeIconBorderKey}" BorderBrush="#535666" BorderThickness="1" Width="12" Height="10">
        <Border BorderBrush="#FCFCFC" BorderThickness="2">
            <Border BorderBrush="#535666" BorderThickness="1" />
        </Border>
    </Border>-->

    <!--Maximize button icon (disabled)-->
    <!--<Border x:Key="{x:Static local_def:ResourceDefinitions.MaximizeDisabledIconBorderKey}" BorderBrush="#9FA5B2" BorderThickness="1" Width="12" Height="10">
        <Border BorderBrush="#FCFCFC" BorderThickness="2">
            <Border BorderBrush="#9FA5B2" BorderThickness="1" />
        </Border>
    </Border>-->

    <!--Close button icon-->
    <!--<Image Source="/FrameworkSkin;component/Images/buttonX.png" 
           Width="13" 
           Height="10" 
           x:Key="{x:Static local_def:ResourceDefinitions.CloseIconKey}" />-->

    <!--Background color for red button (e.g close button)-->
    <!--<LinearGradientBrush x:Key="{x:Static local_def:ResourceDefinitions.RedButtonBackgroundBrushKey}" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F89C8C" />
        <GradientStop Offset="0.45" Color="#D47F75" />
        <GradientStop Offset="0.45" Color="#C04C3C" />
        <GradientStop Offset="1" Color="#C98172" />
    </LinearGradientBrush>-->

    <!--Background color for red button when the mouse is over the background (e.g close button)-->
    <!--<LinearGradientBrush x:Key="{x:Static local_def:ResourceDefinitions.RedButtonMouseOverBackgroundBrushKey}" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F89C8C" />
        <GradientStop Offset="0.45" Color="#E36A53" />
        <GradientStop Offset="0.45" Color="#C72B0E" />
        <GradientStop Offset="0.75" Color="#D44310" />
        <GradientStop Offset="1" Color="#F5E478" />
    </LinearGradientBrush>-->


    <!--Minimize button style-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.MinimizeButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True" Width="27" Height="23">
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_window_borderOuter_normal}" BorderThickness="1,0,0,1" CornerRadius="0,0,0,5"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_window_borderInner_normal}" Background="{x:Null}" BorderThickness="1,0,1,1" CornerRadius="0,0,0,4" Margin="2,1,0,2"/>
                        <Border x:Name="Inner_Spotlight" BorderThickness="1,0,1,1" CornerRadius="0,0,0,5" Margin="2,14,0,2" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}" Opacity="0.995"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0,0,0,5" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" Margin="2,1,0,0"/>
                        <Grid x:Name="Holder"  Width="14" Height="14" Background="{x:Null}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,3,5,3">
                            <Border x:Name="path" Margin="1" BorderBrush="{DynamicResource br_uiFramework_foreground_active}" VerticalAlignment="Bottom" HorizontalAlignment="Center" BorderThickness="1,2,1,1" CornerRadius="1" Width="12" Height="2"/>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter TargetName="path" Property="BorderBrush" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Maximize button style-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.MaximizeButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True" Width="27" Height="23">
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_window_borderOuter_normal}" BorderThickness="0,0,0,1" CornerRadius="0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_window_borderInner_normal}" Background="{x:Null}" BorderThickness="1,0,1,1" CornerRadius="0" Margin="1,1,0,2"/>
                        <Border x:Name="Inner_Spotlight" BorderThickness="1,0,1,1" CornerRadius="0" Margin="1,14,0,2" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0,0,0,0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" Margin="1,1,0,0"/>
                        <Grid x:Name="Holder"  Width="14" Height="14" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,3,0,0">
                            <Border x:Name="path" Margin="1" BorderBrush="{DynamicResource br_uiFramework_foreground_active}" BorderThickness="1,2,1,1" CornerRadius="1" Width="Auto" Height="Auto"/>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter TargetName="path" Property="BorderBrush" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>

        </Style.Triggers>
    </Style>


    <!--Restore button style-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.RestoreButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True" Width="27" Height="23">
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_window_borderOuter_normal}" BorderThickness="0,0,0,1" CornerRadius="0"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_window_borderInner_normal}" Background="{x:Null}" BorderThickness="1,0,1,1" CornerRadius="0" Margin="1,1,0,2"/>
                        <Border x:Name="Inner_Spotlight" BorderThickness="1,0,1,1" CornerRadius="0" Margin="1,14,0,2" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0,0,0,0" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" Margin="1,1,0,0"/>
                        <Grid x:Name="Holder"  Width="14" Height="14" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,3,0,0">
                            <Canvas>
                                <Path x:Name="path" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource br_uiFramework_foreground_active}" Width="12" Height="12" Data="M3.4999998,0.5 L10.5,0.5 C11.052284,0.5 11.5,0.89796907 11.5,1.388889 L11.5,7.6111112 C11.5,8.1020308 11.052284,8.5 10.5,8.5 L9.4999999,8.5 9.4999999,4.3888888 C9.4999999,3.897969 9.0522847,3.5 8.4999999,3.5 L2.5,3.5 2.5,1.388889 C2.4999999,0.89796907 2.9477152,0.5 3.4999998,0.5 z M2.5,1.5 L11.5,1.5 M0.5,4.3888889 C0.5,3.8979691 0.94771525,3.5 1.5,3.5 L8.5,3.5 C9.0522847,3.5 9.5,3.8979691 9.5,4.3888889 L9.5,10.611111 C9.5,11.102031 9.0522847,11.5 8.5,11.5 L1.5,11.5 C0.94771525,11.5 0.5,11.102031 0.5,10.611111 z M0.50000001,4.5 L9.4999999,4.5" Canvas.Left="1" Canvas.Top="1"/>
                            </Canvas>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter Property="Stroke" TargetName="path" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>

        </Style.Triggers>
    </Style>


    <!--Close button style-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.CloseButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True" Width="48" Height="23">
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_window_borderOuter_normal}" BorderThickness="0,0,1,1" CornerRadius="0,0,5,0"/>
                        <Border x:Name="Mid_Border" BorderBrush="{DynamicResource br_btn_window_borderInner_normal}" Background="{x:Null}"  CornerRadius="0,0,4,0" Margin="1,1,2,2"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_window_borderInner_normal}" Background="{x:Null}" BorderThickness="1,1,1,1" CornerRadius="0,0,4,0" Margin="1,1,2,2"/>
                        <Border x:Name="Inner_Spotlight" BorderThickness="1,0,1,1" CornerRadius="0" Margin="1,14,0,2" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0,0,0,5" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" Margin="1,1,2,0"/>
                        <Grid x:Name="Holder"  Width="14" Height="14" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,3,0,0">
                            <Path x:Name="path" Fill="{DynamicResource br_uiFramework_foreground_active}" Data="F1 M 50.000,49.071 L 47.500,45.500 L 45.500,45.500 L 49.000,50.500 L 45.500,55.500 L 47.500,55.500 L 50.000,51.929 L 51.000,51.929 L 53.500,55.500 L 55.500,55.500 L 52.000,50.500 L 55.500,45.500 L 53.500,45.500 L 51.000,49.071 L 50.000,49.071 Z" Stretch="Fill" Margin="0" Width="12" Height="12"/>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_os_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Background" TargetName="Mid_Border" Value="{DynamicResource br_btn_window_close_fill_hover}"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Inner_Border" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter TargetName="Inner_Border" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Minimize menu item style-->
    <!--Note:  Icons are commented out due to a bug in .NET 3.5 for loading icons in this way.  The bug has been fixed in .NET 4.0-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.MinimizeMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}">
        <Setter Property="Header" Value="Minimize" />
        <!--
        <Setter Property="Icon">
                <Setter.Value>
                    <Image Source="Images/Maximize.ico" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Icon">
                        <Setter.Value>
                            <Image Source="Images/MinimizeDisabled.ico" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        -->
    </Style>


    <!--Maximize menu item style-->
    <!--Note:  Icons are commented out due to a bug in .NET 3.5 for loading icons in this way.  The bug has been fixed in .NET 4.0-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.MaximizeMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}">
        <Setter Property="Header" Value="Maximize" />
        <!--<Setter Property="Icon">
                <Setter.Value>
                    <Image Source="Images/Maximize.ico" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Icon">
                        <Setter.Value>
                            <Image Source="Images/MaximizeDisabled.ico" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>-->
    </Style>


    <!--Restore menu item style-->
    <!--Note:  Icons are commented out due to a bug in .NET 3.5 for loading icons in this way.  The bug has been fixed in .NET 4.0-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.RestoreMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}">
        <Setter Property="Header" Value="Restore" />
        <!--<Setter Property="Icon">
                <Setter.Value>
                    <Image Source="Images/Restore.ico" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Icon">
                        <Setter.Value>
                            <Image Source="Images/RestoreDisabled.ico" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>-->
    </Style>


    <!--Close menu item style-->
    <!--Note:  Icons are commented out due to a bug in .NET 3.5 for loading icons in this way.  The bug has been fixed in .NET 4.0-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.CloseMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}">
        <Setter Property="Header" Value="Close" />
        <!--<Setter Property="Icon">
                <Setter.Value>
                    <Image Source="Images/close.ico" />
                </Setter.Value>
            </Setter>-->
    </Style>


    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}">
        <!-- implicit menu item -->
    </Style>





    <Style TargetType="{x:Type ToolTip}" x:Key="{x:Static local_def:ResourceDefinitions.ToolTipStyleKey}">
        <!-- Tool Tip -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_toolTip_fontSize}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">

                    <Grid Name="mainGrid" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <Border x:Name="DropDown_DropShadow_Blur" SnapsToDevicePixels="True" Background="{DynamicResource br_btn_os_blurEffect_fill_normal}" CornerRadius="5" Margin="2,3,2,2" RenderTransformOrigin="0.5,0.5" Effect="{DynamicResource fx_blurEffect_ds_comboBox_dropDown}"/>
                        <!--<Border x:Name="BorderOuter" Margin="0,2,3,3" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_contextMenu_fill}"/>-->
                        <Border x:Name="BorderOuter" Margin="0,2,3,3" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource br_contextMenu_borderOuter}" Background="{DynamicResource br_item_tile_fill_hover}"/>
                        <Border x:Name="BorderInner" Margin="1,3,4,4" Width="Auto" Height="Auto" BorderThickness="1" CornerRadius="3" BorderBrush="{DynamicResource br_contextMenu_borderInner}" >
                            <ContentPresenter Margin="3" />
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single line of code to make ToolTip style be used -->
    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ToolTipStyleKey}}"/>

    <Style TargetType="{x:Type FrameworkElement}" x:Key="ResizeGrip">
        <Setter Property="Rectangle.Fill" Value="Transparent"/>
        <Setter Property="Line.Stroke" Value="Transparent"/>
    </Style>
   
    <!-- embedded button -->
    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.EmbeddedButtonStyleKey}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="Effect" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" Margin="-1" BorderThickness="1" CornerRadius="5" Background="{DynamicResource br_btn_capsule_borderInner_normal}" Effect="{DynamicResource fx_blurEffect_highlight_embedded_btn}" />
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}" RenderTransformOrigin="0.497,0.536"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <ContentPresenter Margin="3" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- embedded button for filter on headers -->
    <Style TargetType="{x:Type Button}" x:Key="EmbeddedButtonFilterStyleKey">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="Effect" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" Margin="-1" BorderThickness="1" CornerRadius="5" Background="Transparent" Effect="{DynamicResource fx_blurEffect_highlight_embedded_btn}" SnapsToDevicePixels="True"/>
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}" Visibility="Hidden" SnapsToDevicePixels="True"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4" SnapsToDevicePixels="True"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_embedded_glassEffect_normal}" SnapsToDevicePixels="True"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1" SnapsToDevicePixels="True"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}" SnapsToDevicePixels="True"/>
                        <Viewbox x:Name="PART_Icon" Margin="4" HorizontalAlignment="Center" VerticalAlignment="Center"  Width="8" Height="8" IsHitTestVisible="True">
                            <Path Fill="{TemplateBinding Foreground}" Stretch="Fill" Stroke="{TemplateBinding Foreground}" HorizontalAlignment="Right" Data="M0,0 L210,0 210,30 130,100 130,180 80,180 80,100 0,30 z" VerticalAlignment="Top" />
                        </Viewbox>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_embedded_glassEffect_hover}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_embedded_glassEffect_pressed}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Primary_BtnBase_NoStroke_Toggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="hitArea" Opacity="0" Background="Red" BorderBrush="Red" BorderThickness="1"/>

                        <Viewbox x:Name="vb_icon_glow" HorizontalAlignment="Center" VerticalAlignment="Center" >
                            <Path x:Name="icon_glow" Stroke="{x:Null}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Stretch="Uniform" Fill="{DynamicResource br_uiFramework_foreground_hover}" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="1.5" Margin="0" Opacity="0" RenderTransformOrigin="0.5,0.5" Data="{TemplateBinding Path.Data}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Viewbox>

                        <Viewbox x:Name="vb_icon_normal" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path x:Name="icon_normal" Stroke="{x:Null}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Stretch="Uniform" Fill="{DynamicResource br_audioCollapseToggle_fill}" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="1.5" Margin="0" Data="{TemplateBinding Path.Data}"/>
                        </Viewbox>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="icon_glow" Value="1"/>
                            <Setter Property="Opacity" TargetName="icon_normal" Value="0"/>
                            <Setter Property="RenderTransform" TargetName="icon_glow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransform" TargetName="icon_glow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="icon_normal" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Arrow_Toggle_Button" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Primary_BtnBase_NoStroke_Toggle}">
        <Setter Property="Path.Data" Value="M 0,0 L 3.5,4 L 7,0 Z"/>
    </Style>

    <Style x:Key="Pin_Button_Base" TargetType="{x:Type ToggleButton}" BasedOn="{x:Null}">
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Grid x:Name="button" Visibility="Visible">
                            <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}" Opacity="0.25"/>
                            <Border x:Name="Outer_Border" BorderThickness="1" CornerRadius="4" Opacity="1">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="#7F000000"/>
                                </Border.BorderBrush>
                            </Border>
                            <Border x:Name="Inner_Border" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1" Opacity="1">
                                <Border.BorderBrush>
                                    <!-- Capsule Buttons -->

                                    <SolidColorBrush Color="#59FFFFFF"/>
                                </Border.BorderBrush>
                            </Border>
                            <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                            <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Opacity="0.6">
                                <Border.Background>

                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#3EFFFFFF" Offset="0"/>
                                        <GradientStop Offset="1"/>
                                        <GradientStop Offset="0.399" Color="#47FFFFFF"/>
                                        <GradientStop Color="Transparent" Offset="0.4"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                        <!--<ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5,0,5,1"/>-->
                        <Grid x:Name="icon" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" MinWidth="0" MinHeight="0">
                            <Viewbox x:Name="iconVB" Margin="4" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Grid>
                                    <Canvas x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5" Effect="{x:Null}">
                                        <Path x:Name="content_path" Fill="{x:Null}" Stretch="Uniform" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Data="{TemplateBinding Path.Data}" Canvas.Left="{TemplateBinding Canvas.Left}" Canvas.Top="{TemplateBinding Canvas.Top}" RenderTransformOrigin="0.5,0.5" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round"/>
                                    </Canvas>
                                </Grid>
                            </Viewbox>
                        </Grid>
                    </Grid>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{x:Null}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{x:Null}"/>
                            <Setter Property="Opacity" TargetName="BG_Fill" Value="1"/>
                            <Setter Property="RenderTransform" TargetName="icon">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="45"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="button" Value="Visible"/>
                            <Setter Property="Effect" TargetName="content" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Visibility" TargetName="button" Value="Visible"/>
                            <Setter Property="Effect" TargetName="content" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="RenderTransform" TargetName="icon">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform X="1" Y="1"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter Property="Visibility" TargetName="button" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="Opacity" TargetName="BG_Fill" Value="1"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="Black"/>

                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter Property="Visibility" TargetName="button" Value="Visible"/>
                            <Setter Property="Effect" TargetName="content" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                            <Setter Property="RenderTransform" TargetName="icon">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="45"/>
                                        <TranslateTransform X="1" Y="1"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Pin_Toggle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Pin_Button_Base}">
        <Setter Property="Path.Data" Value="M 440.059,122.071L 441.791,120.873L 445.789,120.882L 447.52,122.083L 447.519,112.668L 445.785,113.868L 441.793,113.868L 440.053,112.667L 440.059,122.071 Z M 452.087,117.389L 447.89,117.668L 447.9,117.068L 452.087,117.389 Z "/>
    </Style>


    <!-- Control Templates -->

    <!-- Error control template for displaying a validation error over properties that
        have thrown an exception or reported a validation failure -->
    <local_data:ValidationErrorConverter x:Key="errorConverter" />

    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.DragHighlightAdornerBrushKey}" Color="{DynamicResource col_fgv_highlight}" />
    <System:Double x:Key="{x:Static local_def:ResourceDefinitions.DragHighlightAdornerCornerRadiusKey}">4.0</System:Double>


    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.ToolbarCommandButtonStyleKey}">
        <!-- toolbar command button -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="MinWidth" Value="22"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" Background="{DynamicResource grad_btn_capsule_fill_normal}"/>
                        <Border x:Name="Outer_Border" BorderBrush="{DynamicResource br_btn_capsule_borderOuter_normal}" BorderThickness="1" CornerRadius="4"/>
                        <Border x:Name="Inner_Border" BorderBrush="{DynamicResource br_btn_capsule_borderInner_normal}" BorderThickness="1" CornerRadius="3" Background="{x:Null}" Margin="1"/>
                        <Border x:Name="Inner_Spotlight" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0" Margin="1,14,1,1" VerticalAlignment="Stretch" Height="Auto" Visibility="Hidden" Background="{DynamicResource grad_btn_capsule_spotlight}"/>
                        <Border x:Name="Glass_Effect" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="4" RenderTransformOrigin="0.497,0.536" Background="{DynamicResource grad_btn_capsule_glassEffect_normal}"/>
                        <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.CommonCloseButtonStyleKey}">
        <!-- toolbar command button -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="BG_Fill" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="4" Background="Transparent" >

                        <Grid x:Name="Grid" Width="8" Height="8" SnapsToDevicePixels="True" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Viewbox>
                                <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="F1 M 50.000,49.071 L 47.500,45.500 L 45.500,45.500 L 49.000,50.500 L 45.500,55.500 L 47.500,55.500 L 50.000,51.929 L 51.000,51.929 L 53.500,55.500 L 55.500,55.500 L 52.000,50.500 L 55.500,45.500 L 53.500,45.500 L 51.000,49.071 L 50.000,49.071 Z" Stretch="Fill" Margin="0" Width="12" Height="12"/>
                            </Viewbox>
                            <Grid.RenderTransform>
                                <ScaleTransform CenterX="4" CenterY="4" ScaleX="1.0" ScaleY="1.0" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true"/>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="RenderTransform" TargetName="Grid">
                                <Setter.Value>
                                    <ScaleTransform CenterX="4" CenterY="4" ScaleX="0.8" ScaleY="0.8" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_btn_toggle_fill_checked}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>



    <!-- Advanced Search Background -->
    <SolidColorBrush x:Key="{x:Static local_def:ResourceDefinitions.ExtendedSearchBackgroundBrushKey}" Color="{DynamicResource col_uiFramework_window_fill}"/>


    <!-- Advanced Search HyperLink -->
    <Style  TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.LinkButtonStyleKey}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock TextDecorations="Underline" >
                            <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--Salvo control button style-->
    <Style x:Key="{x:Static local_def:ResourceDefinitions.SalvoButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="24" />

    </Style>


    <Style  TargetType="{x:Type StatusBar}" x:Key="{x:Static local_def:ResourceDefinitions.StatusBarStyleKey}">
        <Setter Property="Background" Value="{DynamicResource br_uiFramework_window_titleBar_fill}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_toolTip_fontSize}"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="BorderBrush" Value="Red"/>
    </Style>

    <Style TargetType="{x:Type Hyperlink}" x:Key="{x:Static local_def:ResourceDefinitions.HyperLinkStyleKey}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground"
                    Value="{DynamicResource br_uiFramework_foreground_inactive}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}" />
        <Setter Property="TextDecorations" Value="Underline" />
    </Style>
    
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Cursor" Value="SizeAll"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle Margin="0,2">
                            <Rectangle.Fill>
                                <DrawingBrush Viewport="0,0,4,4" ViewportUnits="Absolute" Viewbox="0,0,8,8" ViewboxUnits="Absolute" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="#AAA" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Color Picker -->

    <local_data:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
    <local_data:CountToVisibilityConverter x:Key="CountToVisibleConverter" />

    <DrawingBrush  x:Key="CheckerBrush" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

</ResourceDictionary>