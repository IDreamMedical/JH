<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local_def="clr-namespace:UniGuy.Windows.Definitions;assembly=UniGuy.PresentationCore">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/UniGuy.PresentationFramework;component/Themes/Styles/BlueDark/Styles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="{x:Static local_def:ResourceDefinitions.PropertyErrorTemplateKey}">
        <Grid>
            <AdornedElementPlaceholder x:Name="aep"/>
            <Grid IsHitTestVisible="False">
                <Border BorderThickness="1" BorderBrush="{x:Static Brushes.Red}" CornerRadius="4"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ButtonStyleKey}}"/>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.CheckBoxStyleKey}}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource {x:Static local_def:ResourceDefinitions.PropertyErrorTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.RadioButtonStyleKey}}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource {x:Static local_def:ResourceDefinitions.PropertyErrorTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--<Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.RepeatButtonStyleKey}}"/>-->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ToggleButtonStyleKey}}"/>
    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ScrollBarStyleKey}}"/>
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxStyleKey}}"/>
    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListBoxItemStyleKey}}"/>
    <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ExpanderStyleKey}}"/>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ComboBoxStyleKey}}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource {x:Static local_def:ResourceDefinitions.PropertyErrorTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ComboBoxItemStyleKey}}"/>
    <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ProgressBarStyleKey}}"/>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TextBoxStyleKey}}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource {x:Static local_def:ResourceDefinitions.PropertyErrorTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.PasswordBoxStyleKey}}"/>
    <Style TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.RichTextBoxStyleKey}}"/>
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.LabelStyleKey}}"/>
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuStyleKey}}"/>
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ContextMenuStyleKey}}"/>
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.MenuItemStyleKey}}"/>
    <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.SeparatorStyleKey}}"/>
    <Style TargetType="{x:Type Separator}" x:Key="{x:Static local_def:ResourceDefinitions.ToolBarSeparatorStyleKey}" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
        <!-- separator -->
        <Setter Property="Width" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource br_separator_border}" BorderThickness="1,0,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TabControlStyleKey}}"/>
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TabItemStyleKey}}"/>
    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.SliderStyleKey}}"/>
    <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TreeViewStyleKey}}"/>
    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.TreeViewItemStyleKey}}"/>
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.GroupBoxStyleKey}}"/>
    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListViewStyleKey}}"/>
    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ListViewItemStyleKey}}"/>
    <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ToolBarStyleKey}}"/>
    <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.GridSplitterStyleKey}}"/>
    <!--<Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ScrollViewerStyleKey}}"/>-->
    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.ToolTipStyleKey}}"/>
    <!--<Style TargetType="{x:Type Popup}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.PopupStyleKey}}"/>-->
    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource {x:Static local_def:ResourceDefinitions.StatusBarStyleKey}}"/>
    
    <Style TargetType="{x:Type Window}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Background" Value="{StaticResource {x:Static local_def:ResourceDefinitions.WindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static local_def:ResourceDefinitions.WindowForegroundBrushKey}}" />
    </Style>
    <Style TargetType="{x:Type UserControl}" BasedOn="{StaticResource {x:Type UserControl}}">
        <Setter Property="Background" Value="{StaticResource {x:Static local_def:ResourceDefinitions.WindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static local_def:ResourceDefinitions.WindowForegroundBrushKey}}" />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="{x:Static local_def:ResourceDefinitions.ToolBarButtonStyleKey}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="BG_Fill"/>
                        <Border x:Name="Outer_Border"/>
                        <Border x:Name="Inner_Border"/>
                        <Border x:Name="Inner_Spotlight"/>
                        <Border x:Name="Glass_Effect"/>
                        <Border Margin="{TemplateBinding Padding}">
                            <ContentPresenter RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,0,2,1"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <!--<Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_hover}"/>-->
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_hover}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_hover}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_hover}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                            <Setter Property="Background" TargetName="BG_Fill" Value="{DynamicResource grad_btn_capsule_fill_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Outer_Border" Value="{DynamicResource br_btn_capsule_borderOuter_pressed}"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_btn_capsule_borderInner_pressed}"/>
                            <Setter Property="Background" TargetName="Glass_Effect" Value="{DynamicResource grad_btn_capsule_glassEffect_pressed}"/>
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="Visibility" TargetName="Inner_Spotlight" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>

                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true" >
                            <Setter Property="BorderThickness" TargetName="Inner_Border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="Inner_Border" Value="{DynamicResource br_uiFramework_foreground_hover}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListViewItem}" x:Key="{x:Static local_def:ResourceDefinitions.NotSelectableListViewItemStyleKey}">
        <!-- listviewitem -->
        <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_active}"/>
        <Setter Property="FontSize" Value="{DynamicResource font_uiFramework_fontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource font_uiFramework_fontFamily}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <!--<Border x:Name="Bd" SnapsToDevicePixels="True" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <GridViewRowPresenter Margin="0,3,0,3" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>-->

                    <Border x:Name="Bd" SnapsToDevicePixels="True"
                            CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Background}" BorderThickness="1" Padding="{TemplateBinding Padding}">
                        <GridViewRowPresenter Margin="0,3,0,3" HorizontalAlignment="Stretch" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource br_item_fill_hover}"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource br_item_fill_inFocus}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource br_uiFramework_foreground_inactive}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Image" x:Key="ImgToolBarIcon">
        <Setter Property="Height"  Value="22"></Setter>
        <Setter Property="Width" Value="22"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                <Setter Property="Opacity" Value="0.50"></Setter>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    <!-- TODO others... -->
</ResourceDictionary>